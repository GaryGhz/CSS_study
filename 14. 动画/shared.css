@import url('https://fonts.googleapis.com/css?family=Roboto&display=swap');
@import url('https://fonts.googleapis.com/css?family=Anton&display=swap');
@import url('https://fonts.googleapis.com/css?family=Montserrat:400,700&display=swap');
/* 1.2 Animations
- 可以看作是升级版的 transitions, 我们需要定义关键帧(keyframe), 所以我们可以控制再某个时间点一个元素是何种样式
- 步骤
    - a. 用 @keyframes 定义关键帧
        - (需要命名, 可以随意取), 需要定义一系列的关键帧, 用于之后的CSS animations
        - 一个最基本的关键帧集, 需要 from 和 to 这两个关键帧, 在关键帧里面基本上可以添加任何CSS属性
        - 有的属性无法添加动画效果, 但还是可以改变它, 它可能会直接变成下一属性值, 这种现象的原因是: 对于CSS animation, 
          CSS 仍会自动在开始和结束的值之间制造逐渐过渡效果, 你只是能更好地控制中间状态
    - b. 在对应的元素上面添加 animation 属性即可(参数的顺序不重要): 
        - 第一个参数: 关键帧集的名称 -> animation-name
        - 第二个参数: 持续时间 -> animation-duration
        - 第三个参数: 设置动画将如何完成一个周期, 也就是时间函数 -> animation-timing-function
        - 第四个参数: 延迟时间 -> animation-delay
        - 第五个参数: 动画重复的次数, 默认值为1 -> animation-iteration-count
        - 第六个参数: 设定方向 -> animation-direction
            - (该参数的意思是, 在播放一次后, 它是突变回起始状态, 然后开始下一次重复; 还是交换方向移动回起始状态)
            - 默认值 normal。动画按正常播放。
            - 值可以为 alternate(动画会在奇数次数（1、3、5 等等）正常播放 from -> to，而在偶数次数（2、4、6 等等）向后播放 to -> from。), 
               reverse, alternate-reverse
            - 当值为 alternate 时, 交换方向后的动画也算作一个重复, 也就是每个方向有4次重复
            - 值为 reverse 时, 会从反向开始播关键帧, to -> from 
        - 第七个参数: 决定了动画期间的属性, 规定当动画不播放时（当动画完成时，或当动画有一个延迟未开始播放时），要应用到元素的样式。 -> animation-fill-mode
            - 默认值 none, 动画在动画执行之前和之后不会应用任何样式到目标元素。
            - forwards, 在动画结束后（由 animation-iteration-count 决定），动画将应用该属性值。
            - backwards, 动画开始前的状态, 动画将应用在 animation-delay 定义期间启动动画的第一次迭代的关键帧中定义的属性值。这些都是 from 关键帧中的值
             （当 animation-direction 为 "normal" 或 "alternate" 时）或 to 关键帧中的值（当 animation-direction 为 "reverse" 或 "alternate-reverse" 时）。
            - both, 动画遵循 forwards 和 backwards 的规则。也就是说，动画会在两个方向上扩展动画属性。
    - @keyframes wiggle {
        from {
            transform: rotateZ(0deg);
        }
        to {
            transform: rotateZ(10deg);
        }
}
- 添加多组关键帧
    - 这时候就不使用 from 和 to 了, 使用百分比来设置关键帧
    - 0% 和 100% 就是 from 和 to*/

@keyframes wiggle {
    0% {
        transform: rotateZ(0deg);
    }
    50% {
        transform: rotateZ(-10deg);
    }
    100% {
        transform: rotateZ(10deg);
    }
}

* {
    box-sizing: border-box;
    padding: 0;
}

body {
    font-family: 'Montserrat', sans-serif;
    margin: 0;
}

main {
    /* 给中间的内容整体设置一个最小高度, 确保footer始终能在视口的最底端 */
    min-height: calc(100vh - 3.7rem - 8rem);
    /* 消除header固定定位影响 */
    margin-top: 3.7rem;
}

/* 创建一个背景遮罩 */

.backdrop {
    display: none;
    /* 添加动画 */
    opacity: 0;
    transition: opacity 0.2s linear;
    position: fixed;
    top: 0;
    left: 0;
    z-index: 100;
    width: 100vw;
    height: 100vh;
    background: rgba(0, 0, 0, 0.5);
}

/* 侧边导航栏 */

.mobile-nav {
    /* display: none; */
    position: fixed;
    z-index: 101;
    top: 0;
    left: 0;
    background: white;
    width: 80%;
    height: 100vh;
    /* 添加过渡 */
    /*  translateX(-100%)让元素完全的放到屏幕外, open 类里面有一个新的 transform, 会覆盖这里的设置 */
    transform: translateX(-100%);
    opacity: 0;
    transition: transform 300ms ease-out, opacity 200ms ease-out;
}

.mobile-nav__items {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    width: 90%;
    height: 100%;
    list-style: none;
    margin: 0 auto;
    padding: 0;
}

.mobile-nav__item {
    margin: 1rem 0;
}

.mobile-nav__item a {
    font-size: 1.5rem;
}

/* 切换侧边导航栏按钮 */

.toggle-button {
    width: 3rem;
    background: transparent;
    border: none;
    cursor: pointer;
    padding-top: 0;
    padding-bottom: 0;
    vertical-align: middle;
}

.toggle-button:focus {
    outline: none;
}

.toggle-button__bar {
    width: 100%;
    height: 0.2rem;
    background: black;
    display: block;
    margin: 0.6rem 0;
}

/* header */

.main-header {
    width: 100%;
    background: #2ddf5c;
    padding: 0.5rem 1rem;
    /* 一直固定到视口上方 */
    position: fixed;
    top: 0;
    left: 0;
    /* 设为1, 让header一直在第一个套餐的标记元素上方 */
    z-index: 1;
    display: flex;
    align-items: center;
    justify-content: space-between;
}

.main-header__brand {
    color: #0e4f1f;
    text-decoration: none;
    font-weight: bold;
    vertical-align: middle;
}

.main-header__brand img {
    height: 2.7rem;
    vertical-align: middle;
}

.main-nav {
    display: none;
}

.main-nav__items {
    /* 覆盖无序列表的默认值 */
    margin: 0;
    padding: 0;
    list-style: none;
    display: flex;
}

.main-nav__item {
    margin: 0 1rem;
}

.main-nav__item a, .mobile-nav__item a {
    text-decoration: none;
    color: #0e4f1f;
    font-weight: bold;
    padding: 0.2rem 0;
}

.main-nav__item a:hover, .main-nav__item a:active {
    color: white;
    /* 为超链接增加一个下划线效果 */
    border-bottom: 5px solid white;
}

/* 添加动画 */

.main-nav__item--cta {
    animation: wiggle 200ms 1s 8 none;
}

.main-nav__item--cta a, .mobile-nav__item--cta a {
    color: white;
    background: #ff1b68;
    padding: 0.5rem 1rem;
    border-radius: 8px;
}

.main-nav__item--cta a:hover, .main-nav__item--cta a:active, .mobile-nav__item--cta a:hover, .mobile-nav__item--cta a:active {
    color: #ff1b68;
    background: white;
    border: none;
}

@media (min-width: 40rem) {
    .toggle-button {
        display: none;
    }
    .main-nav {
        /* display: inline-block;
        text-align: right;
        width: calc(100% - 54px);
        vertical-align: middle; */
        display: flex;
    }
}

/* footer */

.main-footer {
    background: black;
    /* 注意如果这里在 footer 标签上指定链接的字体颜色, 那么会被浏览器直接指定的
    样式覆盖, 所以这就是为什么虽然继承了样式还是不生效的原因 */
    /* color: white; */
    padding: 2rem;
    margin-top: 3rem;
}

.main-footer__links {
    display: flex;
    flex-direction: column;
    align-items: center;
    list-style: none;
    padding: 0;
    margin: 0;
}

.main-footer__link {
    margin: 0.5rem 0;
}

.main-footer__link a {
    color: white;
    text-decoration: none;
}

.main-footer__link a:hover, .main-footer__link a:active {
    color: #ccc;
}

@media (min-width: 40rem) {
    .main-footer__links {
        display: flex;
        flex-direction: row;
        justify-content: center;
    }
    .main-footer__link {
        margin: 0 1rem;
    }
}

/* button */

.button {
    background: #0e4f1f;
    color: white;
    /* 按钮中的文本有浏览器指定的默认的样式, 这里我们让继承样式强制生效,  */
    font: inherit;
    border: 1.5px solid #0e4f1f;
    padding: 0.5rem;
    border-radius: 8px;
    font-weight: bold;
    cursor: pointer;
}

.button:hover, .button:active {
    background: white;
    color: #0e4f1f;
}

/* 当我们选中按钮时(也就是 focus 状态), 会出现一个蓝色的轮廓, 这是浏览器的默认设置 
也就是说 focus 有一个默认的样式 outline, 轮廓与边框是相当的, 但它却不是盒子模型的一部分
轮廓在外边距和边框之间*/

.button:focus {
    outline: none;
}

.open {
    display: block !important;
    opacity: 1 !important;
    transform: translateY(0) !important;
}