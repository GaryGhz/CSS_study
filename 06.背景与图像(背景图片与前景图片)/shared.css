* {
    box-sizing: border-box;
    padding: 0;
}

body {
    font-family: 'Montserrat', sans-serif;
    margin: 0;
}

/* header */

.main-header {
    width: 100%;
    background: #2ddf5c;
    padding: 8px 16px;
    /* 一直固定到视口上方 */
    position: fixed;
    top: 0;
    left: 0;
    /* 设为1, 让header一直在第一个套餐的标记元素上方 */
    z-index: 1;
}

.main-header>div {
    display: inline-block;
    vertical-align: middle;
}

/* 2. 给图片添加样式 */

/* 2. 01. 如果我们给图片的容器添加一个高度(宽度也是一样的), 而不是针对图片元素本体, 那么如通过
容器的 height 参数, 图像并不会受到影响, 这是因为默认行为.
默认行为是指: 如果你输入一个图片标签, 并指向一张图片, 然后原始图片 height 和 width 
的值将会被应用, 并被输入你的文档, 无论你为周围元素设置的 height 和 width 是什么 */

.main-header__brand {
    color: #0e4f1f;
    text-decoration: none;
    font-weight: bold;
    font-size: 22px;
    /* width: 20px; */
    height: 22px;
    display: inline-block;
}

/* 2 .02. 如何关联图片和容器: 
第一: 直接选中图片, 然后再设置图片的 height. 注意这里也不能设置图片的 height: 100%; 
    这样设置不会让图片撑满父容器的高度, 而是会让图片保持其原始高度.
    其实造成这种结果的原因很简单, 那就是 图片的父容器是 inline 元素, 如果我们将父元素设置为
    inline-blick 或 block 就可以对 img 设置百分比数值
    总结: 如果你将图片嵌入内联元素, 那么此时对图片设置百分比单位, 就会应用图片的默认宽度或高度的尺寸.如果你在块级元素中使用它, 就会用容器的宽度或高度*/

.main-header__brand img {
    height: 100%;
    /* width: 100%; */
}

.main-nav {
    display: inline-block;
    text-align: right;
    width: calc(100% - 74px);
    vertical-align: middle;
}

.main-nav__items {
    /* 覆盖无序列表的默认值 */
    margin: 0;
    padding: 0;
    list-style: none;
}

.main-nav__item {
    display: inline-block;
    margin: 0 16px;
}

.main-nav__item a {
    text-decoration: none;
    color: #0e4f1f;
    font-weight: bold;
    padding: 3px 0;
}

.main-nav__item a:hover, .main-nav__item a:active {
    color: white;
    /* 为超链接增加一个下划线效果 */
    border-bottom: 5px solid white;
}

.main-nav__item--cta a {
    color: white;
    background: #ff1b68;
    padding: 8px 16px;
    border-radius: 8px;
}

.main-nav__item--cta a:hover, .main-nav__item--cta a:active {
    color: #ff1b68;
    background: white;
    border: none;
}

/* footer */

.main-footer {
    background: black;
    /* 注意如果这里在 footer 标签上指定链接的字体颜色, 那么会被浏览器直接指定的
    样式覆盖, 所以这就是为什么虽然继承了样式还是不生效的原因 */
    /* color: white; */
    padding: 32px;
    margin-top: 48px;
}

.main-footer__links {
    list-style: none;
    text-align: center;
    padding: 0;
    margin: 0;
}

.main-footer__link {
    display: inline-block;
    margin: 0 16px;
    /* vertical-align: middle; */
}

.main-footer__link a {
    color: white;
    text-decoration: none;
}

.main-footer__link a:hover, .main-footer__link a:active {
    color: #ccc;
}

/* button */

.button {
    background: #0e4f1f;
    color: white;
    /* 按钮中的文本有浏览器指定的默认的样式, 这里我们让继承样式强制生效,  */
    font: inherit;
    border: 1.5px solid #0e4f1f;
    padding: 8px;
    border-radius: 8px;
    font-weight: bold;
    cursor: pointer;
}

.button:hover, .button:active {
    background: white;
    color: #0e4f1f;
}

/* 当我们选中按钮时(也就是 focus 状态), 会出现一个蓝色的轮廓, 这是浏览器的默认设置 
也就是说 focus 有一个默认的样式 outline, 轮廓与边框是相当的, 但它却不是盒子模型的一部分
轮廓在外边距和边框之间*/

.button:focus {
    outline: none;
}